// <auto-generated />
using System;
using KriptoBank.DataContext.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KriptoBank.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250620202311_usercypto1")]
    partial class usercypto1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KriptoBank.DataContext.Entities.CryptoCurrency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Acronym")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("AvgPrice")
                        .HasColumnType("real");

                    b.Property<float>("CurrentPrice")
                        .HasColumnType("real");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalAmount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CryptoCurrencies");
                });

            modelBuilder.Entity("KriptoBank.DataContext.Entities.CryptoHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CryptoId")
                        .HasColumnType("int");

                    b.Property<float>("NewPrice")
                        .HasColumnType("real");

                    b.Property<float>("OldPrice")
                        .HasColumnType("real");

                    b.Property<DateTime>("TimeOfChange")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CryptoId");

                    b.ToTable("Histories");
                });

            modelBuilder.Entity("KriptoBank.DataContext.Entities.CryptoTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int?>("CryptoId")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<DateTime>("TimeOfTransaction")
                        .HasColumnType("datetime2");

                    b.Property<float>("TotalPrice")
                        .HasColumnType("real");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("KriptoBank.DataContext.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("KriptoBank.DataContext.Entities.UserCryptoCurrency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("CryptoCurrencyId")
                        .HasColumnType("int");

                    b.Property<int?>("CryptoId")
                        .HasColumnType("int");

                    b.Property<float>("PriceAtBuy")
                        .HasColumnType("real");

                    b.Property<int?>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CryptoCurrencyId");

                    b.HasIndex("WalletId");

                    b.ToTable("userCryptoCurrencies");
                });

            modelBuilder.Entity("KriptoBank.DataContext.Entities.Wallet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Balance")
                        .HasColumnType("real");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("KriptoBank.DataContext.Entities.CryptoHistory", b =>
                {
                    b.HasOne("KriptoBank.DataContext.Entities.CryptoCurrency", "Currency")
                        .WithMany("CurrencyHistory")
                        .HasForeignKey("CryptoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("KriptoBank.DataContext.Entities.CryptoTransaction", b =>
                {
                    b.HasOne("KriptoBank.DataContext.Entities.CryptoCurrency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KriptoBank.DataContext.Entities.User", "User")
                        .WithMany("CryptoTransactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Currency");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KriptoBank.DataContext.Entities.UserCryptoCurrency", b =>
                {
                    b.HasOne("KriptoBank.DataContext.Entities.CryptoCurrency", "CryptoCurrency")
                        .WithMany()
                        .HasForeignKey("CryptoCurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KriptoBank.DataContext.Entities.Wallet", "Wallet")
                        .WithMany("UserCurrencies")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CryptoCurrency");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("KriptoBank.DataContext.Entities.Wallet", b =>
                {
                    b.HasOne("KriptoBank.DataContext.Entities.User", "User")
                        .WithOne("Wallet")
                        .HasForeignKey("KriptoBank.DataContext.Entities.Wallet", "UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("KriptoBank.DataContext.Entities.CryptoCurrency", b =>
                {
                    b.Navigation("CurrencyHistory");
                });

            modelBuilder.Entity("KriptoBank.DataContext.Entities.User", b =>
                {
                    b.Navigation("CryptoTransactions");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("KriptoBank.DataContext.Entities.Wallet", b =>
                {
                    b.Navigation("UserCurrencies");
                });
#pragma warning restore 612, 618
        }
    }
}
