// <auto-generated />
using System;
using KriptoBank.DataContext.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KriptoBank.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250622202636_hopefully-final")]
    partial class hopefullyfinal
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KriptoBank.DataContext.Entities.CryptoCurrency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Acronym")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("AvgPrice")
                        .HasColumnType("real");

                    b.Property<float>("CurrentPrice")
                        .HasColumnType("real");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalAmount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CryptoCurrencies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Acronym = "BTC",
                            AvgPrice = 98492f,
                            CurrentPrice = 98492f,
                            IsDeleted = false,
                            Name = "Bitcoin",
                            TotalAmount = 8465
                        },
                        new
                        {
                            Id = 2,
                            Acronym = "ETH",
                            AvgPrice = 2139.21f,
                            CurrentPrice = 2139.21f,
                            IsDeleted = false,
                            Name = "Ethereum",
                            TotalAmount = 9362
                        },
                        new
                        {
                            Id = 3,
                            Acronym = "BNB",
                            AvgPrice = 602.99f,
                            CurrentPrice = 602.99f,
                            IsDeleted = false,
                            Name = "Binance Coin",
                            TotalAmount = 4218
                        },
                        new
                        {
                            Id = 4,
                            Acronym = "XRP",
                            AvgPrice = 1.94f,
                            CurrentPrice = 1.94f,
                            IsDeleted = false,
                            Name = "XRP",
                            TotalAmount = 2941
                        },
                        new
                        {
                            Id = 5,
                            Acronym = "USDT",
                            AvgPrice = 1f,
                            CurrentPrice = 1f,
                            IsDeleted = false,
                            Name = "Tether (Polygon)",
                            TotalAmount = 6157
                        },
                        new
                        {
                            Id = 6,
                            Acronym = "ADA",
                            AvgPrice = 0.515608f,
                            CurrentPrice = 0.515608f,
                            IsDeleted = false,
                            Name = "Cardano",
                            TotalAmount = 1550
                        },
                        new
                        {
                            Id = 7,
                            Acronym = "SOL",
                            AvgPrice = 126.87f,
                            CurrentPrice = 126.87f,
                            IsDeleted = false,
                            Name = "Solana",
                            TotalAmount = 9822
                        },
                        new
                        {
                            Id = 8,
                            Acronym = "DOGE",
                            AvgPrice = 0.14508f,
                            CurrentPrice = 0.14508f,
                            IsDeleted = false,
                            Name = "Dogecoin",
                            TotalAmount = 2774
                        },
                        new
                        {
                            Id = 9,
                            Acronym = "MATIC",
                            AvgPrice = 0.165074f,
                            CurrentPrice = 0.165074f,
                            IsDeleted = false,
                            Name = "Polygon",
                            TotalAmount = 6733
                        },
                        new
                        {
                            Id = 10,
                            Acronym = "DOT",
                            AvgPrice = 3.08f,
                            CurrentPrice = 3.08f,
                            IsDeleted = false,
                            Name = "Polkadot",
                            TotalAmount = 7294
                        },
                        new
                        {
                            Id = 11,
                            Acronym = "AVAX",
                            AvgPrice = 15.76f,
                            CurrentPrice = 15.76f,
                            IsDeleted = false,
                            Name = "Avalanche",
                            TotalAmount = 1890
                        },
                        new
                        {
                            Id = 12,
                            Acronym = "LINK",
                            AvgPrice = 11.05f,
                            CurrentPrice = 11.05f,
                            IsDeleted = false,
                            Name = "Chainlink",
                            TotalAmount = 3933
                        },
                        new
                        {
                            Id = 13,
                            Acronym = "LTC",
                            AvgPrice = 77.01f,
                            CurrentPrice = 77.01f,
                            IsDeleted = false,
                            Name = "Litecoin",
                            TotalAmount = 5527
                        },
                        new
                        {
                            Id = 14,
                            Acronym = "SHIB",
                            AvgPrice = 1.017E-05f,
                            CurrentPrice = 1.017E-05f,
                            IsDeleted = false,
                            Name = "Shiba Inu",
                            TotalAmount = 1084
                        },
                        new
                        {
                            Id = 15,
                            Acronym = "TRX",
                            AvgPrice = 0.26054f,
                            CurrentPrice = 0.26054f,
                            IsDeleted = false,
                            Name = "TRON",
                            TotalAmount = 7871
                        });
                });

            modelBuilder.Entity("KriptoBank.DataContext.Entities.CryptoHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CryptoId")
                        .HasColumnType("int");

                    b.Property<float>("CurrentPrice")
                        .HasColumnType("real");

                    b.Property<float>("OldPrice")
                        .HasColumnType("real");

                    b.Property<DateTime>("TimeOfChange")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CryptoId");

                    b.ToTable("Histories");
                });

            modelBuilder.Entity("KriptoBank.DataContext.Entities.CryptoTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int?>("CryptoId")
                        .HasColumnType("int");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<DateTime>("TimeOfTransaction")
                        .HasColumnType("datetime2");

                    b.Property<float>("TotalPrice")
                        .HasColumnType("real");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("KriptoBank.DataContext.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "user1@example.com",
                            IsDeleted = false,
                            Password = "user11",
                            Username = "user1"
                        },
                        new
                        {
                            Id = 2,
                            Email = "user2@example.com",
                            IsDeleted = false,
                            Password = "user22",
                            Username = "user2"
                        },
                        new
                        {
                            Id = 3,
                            Email = "user3@example.com",
                            IsDeleted = false,
                            Password = "user33",
                            Username = "user3"
                        });
                });

            modelBuilder.Entity("KriptoBank.DataContext.Entities.UserCryptoCurrency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int?>("CryptoId")
                        .HasColumnType("int");

                    b.Property<float>("PriceAtBuy")
                        .HasColumnType("real");

                    b.Property<int?>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WalletId");

                    b.ToTable("userCryptoCurrencies");
                });

            modelBuilder.Entity("KriptoBank.DataContext.Entities.Wallet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Balance")
                        .HasColumnType("real");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Wallets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Balance = 4000f,
                            IsDeleted = false,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Balance = 4000f,
                            IsDeleted = false,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            Balance = 4000f,
                            IsDeleted = false,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("KriptoBank.DataContext.Entities.CryptoHistory", b =>
                {
                    b.HasOne("KriptoBank.DataContext.Entities.CryptoCurrency", "Currency")
                        .WithMany("CurrencyHistory")
                        .HasForeignKey("CryptoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("KriptoBank.DataContext.Entities.CryptoTransaction", b =>
                {
                    b.HasOne("KriptoBank.DataContext.Entities.User", "User")
                        .WithMany("CryptoTransactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("KriptoBank.DataContext.Entities.UserCryptoCurrency", b =>
                {
                    b.HasOne("KriptoBank.DataContext.Entities.Wallet", "Wallet")
                        .WithMany("UserCurrencies")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("KriptoBank.DataContext.Entities.Wallet", b =>
                {
                    b.HasOne("KriptoBank.DataContext.Entities.User", "User")
                        .WithOne("Wallet")
                        .HasForeignKey("KriptoBank.DataContext.Entities.Wallet", "UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("KriptoBank.DataContext.Entities.CryptoCurrency", b =>
                {
                    b.Navigation("CurrencyHistory");
                });

            modelBuilder.Entity("KriptoBank.DataContext.Entities.User", b =>
                {
                    b.Navigation("CryptoTransactions");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("KriptoBank.DataContext.Entities.Wallet", b =>
                {
                    b.Navigation("UserCurrencies");
                });
#pragma warning restore 612, 618
        }
    }
}
